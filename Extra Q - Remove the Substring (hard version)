   #include <bits/stdc++.h>
using namespace std;

// Macros
#define fast_io ios::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr);
#define pb push_back
#define mp make_pair
#define all(v) (v).begin(), (v).end()
#define rall(v) (v).rbegin(), (v).rend()
#define fi first
#define se second
#define sz(x) (int)((x).size())
#define endl '\n'
#define fl(i,n) for(int i=0;i<n;i++)
#define fr(i,n) for(int i=n-1;i>=0;i--)

// Typedefs
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef vector<int> vi;
typedef vector<ll> vll;
typedef vector<pii> vpii;
typedef vector<pll> vpll;


// Constants
const int MOD = 1e9 + 7;
const ll INF = 1e18;
const double EPS = 1e-9;

// Debugging
#ifndef ONLINE_JUDGE
    #define debug(x) cerr << #x << " = " << (x) << endl;
#else
    #define debug(x)
#endif

// Utility Functions
ll gcd(ll a, ll b) { return b ? gcd(b, a % b) : a; }
ll lcm(ll a, ll b) { return a / gcd(a, b) * b; }

ll mod_add(ll a, ll b, ll m = MOD) {
    return (a + b) % m;
}

ll mod_sub(ll a, ll b, ll m = MOD) {
    return (a - b + m) % m;
}

ll mod_mul(ll a, ll b, ll m = MOD) {
    return (a * b) % m;
}

ll mod_pow(ll a, ll b, ll m = MOD) {
    ll res = 1;
    while (b > 0) {
        if (b & 1) res = mod_mul(res, a, m);
        a = mod_mul(a, a, m);
        b >>= 1;
    }
    return res;
}

ll mod_inv(ll a, ll m = MOD) {
    // Modular inverse using Fermat's Little Theorem: a^(m-2) % m
    return mod_pow(a, m - 2, m);
}

vector<ll> factorial, inv_factorial;

void precompute_factorials(int maxN, ll m = MOD) {
    factorial.resize(maxN + 1);
    inv_factorial.resize(maxN + 1);

    factorial[0] = 1;
    for (int i = 1; i <= maxN; ++i) {
        factorial[i] = mod_mul(factorial[i - 1], i, m);
    }

    inv_factorial[maxN] = mod_inv(factorial[maxN], m);
    
    // (n)^-1 = ((n+1)^-1) * (n+1)
    for (int i = maxN - 1; i >= 0; --i) {
        inv_factorial[i] = mod_mul(inv_factorial[i + 1], i + 1, m);
    }
}

ll ncr(ll n, ll r, ll m = MOD) {
    if (r > n || r < 0) return 0;
    return mod_mul(factorial[n], mod_mul(inv_factorial[r], inv_factorial[n - r], m), m);
}

// Input/Output
template<typename T>
void read_vector(vector<T>& v) {
    for (auto& x : v) cin >> x;
}

template<typename T>
void print_vector(const vector<T>& v) {
    for (const auto& x : v) cout << x << " ";
    cout << endl;
}
  
 void solve(){
     
     string s, t;
     cin>>s>>t;
     
     int n = s.size();
     
     int ans = 0;
     
     fl(i, n){
         if(s[i]==t[0]){ 
             int pt = 0;
             for(int j=i;j<n;j++){
                 if(s[j]==t[pt]){
                     pt++;
                 }
                 if(pt==t.size()){
                    //  sub [i...j]
                    ans = max(ans, i);
                    ans = max(ans, n-j-1);
                     break;
                 }
             }
         }
         
     }
     
     cout<<ans<<endl;
 }
 
bool isValid(string &s, string &t, int len) {
    int n = s.size();
    for (int i = 0; i + len <= n; i++) {
        string temp = s.substr(0, i) + s.substr(i + len);   
        int j = 0, k = 0;
        while (j < temp.size() && k < t.size()) {
            if (temp[j] == t[k]) k++;
            j++;
        }
        if (k == t.size()) return true;  
    }
    return false;
}

void solve2() {
    string s, t;
    cin >> s >> t;
    
    int low = 0, high = (int)s.size() - (int)t.size(), ans = 0;
    
    while (low <= high) {
        int mid = (low + high) / 2;
        if (isValid(s, t, mid)) {
            ans = mid;  
            low = mid + 1;  
        } else {
            high = mid - 1;   
        }
    }
    
    cout << ans << '\n';
}
 
 void solve3(){
    string s, t;
    cin >> s >> t;
    int n = s.size(), m = t.size();
     
    vector<int> left(m), right(m);
    for (int i = 0, j = 0; i < n && j < m; i++){
        if(s[i] == t[j]){
            left[j] = i;
            j++;
        }
    }
     
    for (int i = n - 1, j = m - 1; i >= 0 && j >= 0; i--){
        if(s[i] == t[j]){
            right[j] = i;
            j--;
        }
    }
     
    int ans = max(right[0], n - left[m - 1] - 1);
    
    for (int i = 0; i < m - 1; i++){
        ans = max(ans, right[i + 1] - left[i] - 1);
    }
    
    cout << ans << "\n";
}

int main() {
    fast_io;
    
    int maxN = 1e6; // Adjust this  
    // precompute_factorials(maxN);
 
    int t = 1; 
    while (t--) {
        solve3();
    }
    return 0;
}
